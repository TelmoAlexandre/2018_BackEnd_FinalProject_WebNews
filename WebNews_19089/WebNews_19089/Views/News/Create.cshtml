@model WebNews_19089.Models.News

@{
    ViewBag.Title = "Create";
}

<div class="col-1"></div>
<div class="col-8 createNews">

    @using (Html.BeginForm(
            "Create",
            "News",
            FormMethod.Post,
            new { enctype = "multipart/form-data" }
        )) {

        @Html.AntiForgeryToken()

        <h2 class="bold">Create News</h2>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <input id="UserIdentityName" name="email" type="hidden" value="@User.Identity.Name">

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", maxlength = "80", placeholder= "This is the News Headline.  [Max length is 80 characters]" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control createDescription", maxlength = "250", placeholder = "The description will appear in the home page. \n\n[Max length is 250 characters]" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Content, new { @class = "form-control createContent", placeholder = "This content will only appear in the News page." })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryFK, htmlAttributes: new { @class = "control-label" })
            <div class="col-md-10">
                @Html.DropDownList("CategoryFK", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryFK, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            Photos
            <div class="col-md-10">

                @* File Upload *@
                <input type="file"
                       name="fileUploadPhoto"
                       multiple
                       style="color:blue;"
                       accept=".jpg"
                       onchange="refreshUploadedImg(event)" />

            </div>


        </div>

        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn bold createButton" />
            </div>
        </div>
    }

</div>


<script>

    // atualiza o preview da imagem
    var refreshUploadedImg = function (event) {
        S

        // referencia à tag <img/>
        var img = document.getElementById('imgNews');

        // altera o 'src' da <img/> para o da imagem carregada
        img.src = URL.createObjectURL(event.target.files[0]);
    }

</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


